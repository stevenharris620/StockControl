@using StockControl.Shared.Requests
@using StockControl.Services
@using AKSoftware.Blazor.Utilities
@using StockControl.Services.Exceptions
 @namespace StockControl.Components


<MudTable ServerData="@(new Func<TableState, Task<TableData<PartDetail>>>(ServerReloadAsync))"
          Dense="true" Hover="true" @ref="_table"  Loading="@_loading" LoadingProgressColor="Color.Warning">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Parts</MudText>
		<MudSpacer/>
		<MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
		              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh><MudTableSortLabel SortLabel="image_field" T="PartDetail">Image</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortLabel="name_field" T="PartDetail">Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortLabel="partcode_field" T="PartDetail">Part Code</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortLabel="cost_field" T="PartDetail">Cost</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortLabel="stocklevel_field" T="PartDetail">Stock Level</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortLabel="action_field" T="PartDetail">Actions</MudTableSortLabel></MudTh>
	</HeaderContent>
    <RowTemplate>
		@if (string.IsNullOrEmpty(@context.ImageChar64))

		    {
		        <MudTd DataLabel="Image"></MudTd>
		    }

		else
		{
		    <MudTd DataLabel="Image"><img src="@context.ImageChar64" style="height: 50px; width: 50px; border-radius: 50%;"/></MudTd>
		}

        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="PartCode">@context.PartCode</MudTd>
        <MudTd DataLabel="Cost">@context.Cost</MudTd>
        <MudTd DataLabel="Stock Level">@context.StockLevel</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Preview" Color="Color.Default"
                           OnClick="async () => await OnViewClicked.InvokeAsync(context)"/>

            <AuthorizeView Roles="Manager" Context="test">
                <Authorized Context="test">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default"
                                   OnClick="async () => await OnEditClicked.InvokeAsync(context)"/>

                </Authorized>
            </AuthorizeView>
            @*		<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
						   OnClick="async ()=> await OnDeleteClicked.InvokeAsync(context)" />*@
        </MudTd>
    </RowTemplate>
	<NoRecordsContent>
		<MudText>No matching records found</MudText>
	</NoRecordsContent>
	<LoadingContent>
		<MudText>Loading...</MudText>
	</LoadingContent>
	<PagerContent>
		<MudTablePager PageSizeOptions="pageSizeOptions"/>
	</PagerContent>
</MudTable>

@code {
	 [Inject] public HttpClient HttpClient { get; set; }
	 [Inject] public IPartService PartService { get; set; }

	 [Parameter]
	 public EventCallback<PartDetail> OnViewClicked { get; set; }

	 [Parameter]
	 public EventCallback<PartDetail> OnEditClicked { get; set; }

	 [Parameter]
	 public EventCallback<PartDetail> OnDeleteClicked { get; set; }

	[CascadingParameter] public Error Error { get; set; }

	 private string? _query = null;
	 private MudTable<PartDetail> _table;
	private int[] pageSizeOptions = new int[] { 5, 10, 15 };

	[Parameter]
	 public bool _loading { get; set; }

	 protected override void OnInitialized()
	 {
		 MessagingCenter.Subscribe<PartsList, PartDetail>(this, "part_updated", async (sender, args) =>
		 {

			 await _table.ReloadServerData();
			 
			 StateHasChanged();
		 });
	 }

	 private async Task<TableData<PartDetail>> ServerReloadAsync(TableState state)
	 {
		 try
		 {
			// throw new Exception();
			 var result = await PartService.GetPartsAsync(_query, state.Page + 1, state.PageSize);

			 return new TableData<PartDetail>
			 {
				 Items = result.Value.Records,
				 TotalItems = result.Value.ItemsCount
			 };
		 }
		 catch (ApiException ex)
		 {
			 Error.HandleError(ex);
		 }
		 catch (Exception ex)
		 {
			 Error.HandleError(ex);
		 }
		 return new TableData<PartDetail>();

	 }

	 private void OnSearch(string? query)
	 {
		 _query = query;
		 _table.ReloadServerData();
	 }
}
