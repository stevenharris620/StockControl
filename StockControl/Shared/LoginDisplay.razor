@using System.Security.Claims
@using Blazored.LocalStorage
@inject ILocalStorageService _localStorageService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<AuthorizeView>
	<Authorized>
		<MudMenu>
			<ActivatorContent>
				<MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Welcome @context.User.FindFirst(ClaimTypes.GivenName).Value</MudChip>
			</ActivatorContent>
			<ChildContent>
				<MudMenuItem OnClick="LogOutAsync">Sign Out</MudMenuItem>
			</ChildContent>
		</MudMenu>
	</Authorized>
	<NotAuthorized>
		<MudIconButton Icon="@Icons.Filled.Login" Color="Color.Secondary" OnClick='()=> _navigationManager.NavigateTo("/authentication/login")'></MudIconButton>
	</NotAuthorized>
</AuthorizeView>

@code {

	private async Task LogOutAsync()
	{
		await _localStorageService.RemoveItemAsync("access_token");
		await _localStorageService.RemoveItemAsync("expiry_date");

		await _authenticationStateProvider.GetAuthenticationStateAsync();
		_navigationManager.NavigateTo("/");
	}
}
